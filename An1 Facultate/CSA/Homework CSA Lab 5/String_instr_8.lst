     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 614162423225784D            s db 'a', 'A', 'b', 'B', '2', '%', 'x', 'M'
    16                                      l_s equ $-s
    17 00000008 FF<rept>                    d times l_s db -1
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          
    24 00000000 BE[00000000]                    mov esi, s
    25 00000005 BF[08000000]                    mov edi, d
    26 0000000A B908000000                      mov ecx, l_s
    27 0000000F FC                              cld
    28                                          start_loop:
    29 00000010 AC                                  lodsb
    30 00000011 3C5A                                cmp al, byte'Z'
    31 00000013 7705                                ja end_if
    32 00000015 3C41                                    cmp al, byte'A'
    33 00000017 7201                                    jb end_if
    34 00000019 AA                                          stosb
    35                                              end_if:
    36 0000001A E2F4                            loop start_loop
    37                                      
    38                                          ; exit(0)
    39 0000001C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 0000001E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
