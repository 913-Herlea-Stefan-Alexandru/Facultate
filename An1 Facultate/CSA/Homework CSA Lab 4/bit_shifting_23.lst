     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  
    15 00000000 57                          a db 0101_0111b
    16 00000001 BE9B                        b dw 1001_1011_1011_1110b
    17 00000003 00000000                    c dd 0
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          
    23 00000000 BB00000000                      mov ebx, 0
    24                                      
    25                                          ; the bits 24-31 of C are the same as the bits of A
    26                                          
    27 00000005 B800000000                      mov eax, 0
    28 0000000A A0[00000000]                    mov al, [a]
    29 0000000F B118                            mov cl, 24
    30 00000011 D3E0                            shl eax, cl
    31 00000013 09C3                            or ebx, eax ; ebx = 0101_0111_0000_0000_0000_0000_0000_0000  hexa: 57 00 00 00
    32                                          
    33                                          ; the bits 16-23 of C are the invert of the bits of the lowest byte of B
    34                                          
    35 00000015 B800000000                      mov eax, 0
    36 0000001A 66A1[01000000]                  mov ax, [b]
    37 00000020 6625FF00                        and ax, 0000_0000_1111_1111b
    38 00000024 F6D0                            not al
    39 00000026 B110                            mov cl, 16
    40 00000028 D3E0                            shl eax, cl
    41 0000002A 09C3                            or ebx, eax ; ebx = 0101_0111_0100_0001_0000_0000_0000_0000   hexa: 57 41 00 00
    42                                          
    43                                          ; the bits 10-15 of C have the value 1
    44                                          
    45 0000002C 81CB00FC0000                    or ebx, 0000_0000_0000_0000_1111_1100_0000_0000b ; 0101_0111_0100_0001_1111_1100_0000_0000   hexa: 57 41 FC 00 
    46                                          
    47                                          ; the bits 2-9 of C are the same as the bits of the highest byte of B
    48                                          
    49 00000032 B800000000                      mov eax, 0
    50 00000037 66A1[01000000]                  mov ax, [b]
    51 0000003D 662500FF                        and ax, 1111_1111_0000_0000b
    52 00000041 B106                            mov cl, 6
    53 00000043 D3E8                            shr eax, cl
    54 00000045 09C3                            or ebx, eax ; ebx = 0101_0111_0100_0001_1111_1110_0110_1100  hexa: 57 41 FE 6C
    55                                          
    56                                          ; the bits 0-1 both contain the value of the sign bit of A
    57                                          
    58 00000047 B800000000                      mov eax, 0
    59 0000004C A0[00000000]                    mov al, [a]
    60 00000051 2480                            and al, 1000_0000b
    61 00000053 B106                            mov cl, 6
    62 00000055 D3E8                            shr eax, cl
    63 00000057 09C3                            or ebx, eax
    64 00000059 B101                            mov cl, 1
    65 0000005B D3E8                            shr eax, cl
    66 0000005D 09C3                            or ebx, eax ; ebx = 0101_0111_0100_0001_1111_1110_0110_1100   hexa: 57 41 FE 6C
    67                                          
    68                                          ; move to c
    69                                          
    70 0000005F 891D[03000000]                  mov [c], ebx ; c = 0101_0111_0100_0001_1111_1110_0110_1100b  little indian: 6C FE 41 57
    71                                      
    72                                          ; exit(0)
    73 00000065 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    74 00000067 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
