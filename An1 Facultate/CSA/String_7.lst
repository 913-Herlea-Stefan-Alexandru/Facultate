     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 01030507                    s1 db 1, 3, 5, 7
    16                                      l_s equ $-s1
    17 00000004 02060904                    s2 db 2, 6, 9, 4
    18 00000008 <res 00000008>              d resb l_s*2
    19                                      
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          
    26 00000000 B904000000                      mov ecx, l_s
    27 00000005 BE[00000000]                    mov esi, s1
    28 0000000A BF[04000000]                    mov edi, s2
    29 0000000F BA[08000000]                    mov edx, d
    30                                          start_loop:
    31 00000014 8A06                                mov al, byte[esi]
    32 00000016 8802                                mov byte[edx], al
    33 00000018 46                                  inc esi
    34 00000019 42                                  inc edx
    35 0000001A 8A07                                mov al, byte[edi]
    36 0000001C 8802                                mov byte[edx], al
    37 0000001E 47                                  inc edi
    38 0000001F 42                                  inc edx
    39 00000020 E2F2                            loop start_loop
    40                                      
    41                                          ; exit(0)
    42 00000022 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 00000024 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
