     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fread, fclose, printf
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17                                      
    18 00000000 70726F626C656D382E-         file_name db "problem8.txt", 0
    18 00000009 74787400           
    19 0000000D 7200                        access_mode db "r", 0
    20                                      
    21 0000000F FFFFFFFF                    file_descriptor dd -1
    22                                      len equ 100
    23 00000013 00<rept>                    text times (len+1) db 0
    24 00000078 546865206D6F737420-         format db "The most frequent upper case character is: %s, appearing %d times", 0
    24 00000081 6672657175656E7420-
    24 0000008A 757070657220636173-
    24 00000093 652063686172616374-
    24 0000009C 65722069733A202573-
    24 000000A5 2C2061707065617269-
    24 000000AE 6E672025642074696D-
    24 000000B7 657300             
    25 000000BA 0000<rept>                  result times (len+1) dw 0
    26 00000184 00000000                    len_r dd 0
    27 00000188 00                          max_let db "", 0
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; A text file is given. Read the content of the file, determine the uppercase letter with the highest frequency and display the letter along with its frequency on the screen. The name of text file is defined
    33                                          
    34 00000000 68[0D000000]                    push dword access_mode
    35 00000005 68[00000000]                    push dword file_name
    36 0000000A FF15[00000000]                  call [fopen]
    37 00000010 83C408                          add esp, 4*2
    38                                          
    39 00000013 A3[0F000000]                    mov [file_descriptor], eax
    40                                          
    41 00000018 83F800                          cmp eax, 0
    42 0000001B 0F8486000000                    je final
    43                                          
    44 00000021 FF35[0F000000]                  push dword [file_descriptor]
    45 00000027 6A64                            push dword len
    46 00000029 6A01                            push dword 1
    47 0000002B 68[13000000]                    push dword text
    48 00000030 FF15[00000000]                  call [fread]
    49 00000036 83C410                          add esp, 4*4
    50                                          
    51 00000039 89C1                            mov ecx, eax
    52 0000003B BE[13000000]                    mov esi, text
    53 00000040 BB00000000                      mov ebx, 0
    54                                          
    55 00000045 FC                              cld
    56                                          start_loop:
    57 00000046 AC                                  lodsb
    58 00000047 3C41                                cmp al, 'A'
    59 00000049 722D                                jb not_good
    60 0000004B 3C5A                                    cmp al, 'Z'
    61 0000004D 7729                                    ja not_good
    62 0000004F 51                                          push ecx
    63 00000050 8B0D[84010000]                              mov ecx, [len_r]
    64 00000056 BF[BA000000]                                mov edi, result
    65 0000005B 83F900                                      cmp ecx, 0
    66 0000005E 7406                                        je add_letter
    67                                                      check_loop:
    68 00000060 AE                                              scasb
    69 00000061 740A                                            je skip_add
    70 00000063 47                                              inc edi
    71 00000064 E2FA                                        loop check_loop
    72                                                      add_letter:
    73 00000066 AA                                              stosb
    74 00000067 FF05[84010000]                                  inc dword[len_r]
    75                                                      skip_add:
    76 0000006D FE07                                        inc byte[edi]
    77 0000006F 3A3F                                        cmp bh, byte[edi]
    78 00000071 7704                                        ja no_change
    79 00000073 668B5FFF                                        mov bx, word[edi-1]
    80                                                      no_change:
    81 00000077 59                                          pop ecx
    82                                              not_good:
    83 00000078 E2CC                            loop start_loop
    84                                          
    85 0000007A 881D[88010000]                  mov [max_let], bl
    86 00000080 88FB                            mov bl, bh
    87 00000082 B700                            mov bh, 0
    88                                          
    89 00000084 53                              push ebx
    90 00000085 68[88010000]                    push dword max_let
    91 0000008A 68[78000000]                    push dword format
    92 0000008F FF15[00000000]                  call [printf]
    93 00000095 83C40C                          add esp, 4*3
    94                                          
    95 00000098 FF35[0F000000]                  push dword [file_descriptor]
    96 0000009E FF15[00000000]                  call [fclose]
    97 000000A4 83C404                          add esp, 4
    98                                          
    99                                          final:
   100                                      
   101                                          ; exit(0)
   102 000000A7 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   103 000000A9 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
